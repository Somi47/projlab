package GameLogic;

import Utility.FunctionLogger;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 6projlab
//  @ File Name : Worker.java
//  @ Date : 2018.03.17.
//  @ Author : Gyöngyösi Péter
//
//




public class Worker extends Thing implements Moveable {
	
	private String name;
	private int points = 0;
	
	public void SetName(String n) {
		FunctionLogger.logFunctionCalled(toString(), "SetName(String n)");
		name = n;
		FunctionLogger.logFunctionReturnVoid();
	}
	
	public String GetName() {
		FunctionLogger.logFunctionCalled(toString(), "GetName()");
		return FunctionLogger.logFunctionReturn( name );
	}
	
	public int GetPoints() {
		FunctionLogger.logFunctionCalled(toString(), "GetPoints()");
		return FunctionLogger.logFunctionReturn( points );
	}
	
	public void Die() {
		FunctionLogger.logFunctionCalled(toString(), "Die()");
		GetField().Remove();
		GetField().GetWarehouse().SetWorkerNumber(GetField().GetWarehouse().GetWorkerNumber()-1);
		FunctionLogger.logFunctionReturnVoid();
	}
	
	public void AddPoint() {
		FunctionLogger.logFunctionCalled(toString(), "AddPoint()");
		points++;
		FunctionLogger.logFunctionReturnVoid();
	}
	
	public boolean Move(Direction dir) {
		FunctionLogger.logFunctionCalled(toString(), "Move(Direction dir)");
		boolean canMove = GetField().GetNeighbor(dir).HitBy(dir, this);
		canMove = FunctionLogger.askUserDecision("El tudja-e tolni?"); // Csak a skeleton működéshez
		if(canMove) {
			GetField().Remove();
			GetField().GetNeighbor(dir).Add(this);
			return FunctionLogger.logFunctionReturn( true );
		}
		return FunctionLogger.logFunctionReturn( false );
	}
	
	public boolean HitBy(Direction dir, Box b) {
		FunctionLogger.logFunctionCalled(toString(), "HitBy(Direction dir, Box b)");
		if(!Move(dir))
			Die();
		return FunctionLogger.logFunctionReturn( true );
	}
	
	public boolean HitBy(Direction dir, Worker w) {
		FunctionLogger.logFunctionCalled(toString(), "HitBy(Direction dir, Worker w)");
		return FunctionLogger.logFunctionReturn( false );
	}
}
