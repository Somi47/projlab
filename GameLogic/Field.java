package GameLogic;

import java.util.ArrayList;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 6projlab
//  @ File Name : Field.java
//  @ Date : 2018.03.17.
//  @ Author : Gyöngyösi Péter
//
//



/* Absztrakt mezõ, melyen dolgok (Thing) lehetnek rajta.
 * Több típusa is lehet: kapcsoló, lyuk, padló, daráló 
 */
public abstract class Field {
	
	/* Tárolja a rajta lévõ dolgokat, a raktárat és
	 * a szomszédait. 
	 */
	Thing thing;
	protected Warehouse warehouse;
	protected ArrayList<Field> neighbor;

	/* Dolog mezõre helyezése. */
	public void Add(Thing t) {
		thing = t;
	}
	
	/* Dolog mezõrõl levétele. */
	public void Remove() {
		if(thing != null)
			thing = null;
	}
	
	/* Raktár beállítása. */
	public void SetWarehouse(Warehouse wh) {
		warehouse = wh;
	}
	
	/* Adott irányba szomszédos mezõk listájába mezõ felvétele. */
	public void SetNeighbor(Direction dir, Field n) {
		neighbor.add(dir.ordinal(),n);
	}
	
	/* Szomszédos mezõlista feltöltése. */
	public void SetNeighbor(ArrayList<Field> f) {
		neighbor = f;
	}
	
	/* Mezõn lévõ dolog lekérdezése. */
	public Thing GetThing() {
		return thing;
	}
	
	/* Raktár lekérdezése */
	public Warehouse GetWarehouse() {
		return warehouse;
	}
	
	/* Adott irányba lévõ mezõ lekérdezése */
	public Field GetNeighbor(Direction dir) {
		return neighbor.get(dir.ordinal());
	}
	
	/* Szomszédos mezõlista lekérdezése */
	public ArrayList<Field> GetNeighbor() {
		return neighbor;
	}
	
	/* Mezõnek adott irányba dolog ütközik.
	 * Meghívja a dologra az ütköztetõ függvényt és
	 * visszaadja ennek eredményét. 
	 */
	public boolean HitBy(Direction dir, Thing t) { 
		if(thing != null)
			return thing.HitBy(dir, t);
		return true;
	}
}
