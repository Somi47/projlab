package GameLogic;

import Utility.FunctionLogger;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : 6projlab
//  @ File Name : Box.java
//  @ Date : 2018.03.17.
//  @ Author : Gyöngyösi Péter
//
//




public class Box extends Thing implements Moveable{
	
	
	public void Destroy() {
		FunctionLogger.logFunctionCalled(toString(), "Destroy()");
		GetField().Remove();
		GetField().GetWarehouse().RemoveBox(this);
		FunctionLogger.logFunctionReturnVoid();
	}
	
	public boolean Move(Direction dir) {
		FunctionLogger.logFunctionCalled(toString(), "Move(Direction dir)");
		boolean canMove = GetField().GetNeighbor(dir).HitBy(dir, this);
		canMove = FunctionLogger.askUserDecision("El tudja-e tolni?"); // Csak a skeleton működéshez
		if(canMove) {
			GetField().Remove();
			GetField().GetNeighbor(dir).Add(this);
			return FunctionLogger.logFunctionReturn(true);
		}
		return FunctionLogger.logFunctionReturn(false);
	}
	
	public boolean HitBy(Direction dir, Box b) {
		FunctionLogger.logFunctionCalled(toString(), "Move(Direction dir)");
		boolean stucked = isStucked();
		if(stucked) {
			b.CheckStucked(dir);			
			return FunctionLogger.logFunctionReturn(false);
		}
		else {
			return FunctionLogger.logFunctionReturn(Move(dir));
		}
	}
	
	public boolean HitBy(Direction dir, Worker w) {
		FunctionLogger.logFunctionCalled(toString(), "HitBy(Direction dir, Worker w)");
		boolean stucked = isStucked();
		if(stucked) { 
			return FunctionLogger.logFunctionReturn(false);
		}
		else {
			return FunctionLogger.logFunctionReturn(Move(dir));
		}
	}
	
	public void CheckStucked(Direction dir) {
		FunctionLogger.logFunctionCalled(toString(), "CheckStucked(Direction dir)");
		if(dir == Direction.Left || dir == Direction.Right)
		{
			boolean stuckedUp   = GetField().GetNeighbor(Direction.Up).GetThing().isStucked();
			boolean stuckedDown = GetField().GetNeighbor(Direction.Down).GetThing().isStucked();
			if(stuckedUp || stuckedDown)
				SetStucked(true);
		}
		else // if(dir == Direction.Up || dir == Direction.Down)
		{
			boolean stuckedLeft   = GetField().GetNeighbor(Direction.Left).GetThing().isStucked();
			boolean stuckedRight = GetField().GetNeighbor(Direction.Right).GetThing().isStucked();
			if(stuckedLeft || stuckedRight)
				SetStucked(true);
		}
		FunctionLogger.logFunctionReturnVoid();
	}
	
}
